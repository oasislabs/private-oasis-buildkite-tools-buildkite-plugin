#! /bin/bash

##
# Build, tag, and push a docker image
#
# Usage:
#
#    $ ./build_tag_push_image.sh <docker-repo> <dockerfile-path> <docker-build-context-dir>
##

# ARG_OPTIONAL_REPEATED([docker-build-arg],[],[Build args for docker],[])
# ARG_OPTIONAL_SINGLE([build-image-tag],[],[Override the build image tag])
# ARG_OPTIONAL_BOOLEAN([push],[],[Push to docker],[on])
# ARG_POSITIONAL_SINGLE([docker-repo],[Docker repo name])
# ARG_POSITIONAL_SINGLE([dockerfile-path],[path to dockerfile])
# ARG_POSITIONAL_SINGLE([docker-build-context-dir],[Which directory to run docker build])
# ARG_HELP([Build, tag and push a docker image on buildkite])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_docker_build_arg=()
_arg_build_image_tag=
_arg_push="on"


print_help()
{
	printf '%s\n' "Build, tag and push a docker image on buildkite"
	printf 'Usage: %s [--docker-build-arg <arg>] [--build-image-tag <arg>] [--(no-)push] [-h|--help] <docker-repo> <dockerfile-path> <docker-build-context-dir>\n' "$0"
	printf '\t%s\n' "<docker-repo>: Docker repo name"
	printf '\t%s\n' "<dockerfile-path>: path to dockerfile"
	printf '\t%s\n' "<docker-build-context-dir>: Which directory to run docker build"
	printf '\t%s\n' "--docker-build-arg: Build args for docker (empty by default)"
	printf '\t%s\n' "--build-image-tag: Override the build image tag (no default)"
	printf '\t%s\n' "--push, --no-push: Push to docker (on by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--docker-build-arg)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_docker_build_arg+=("$2")
				shift
				;;
			--docker-build-arg=*)
				_arg_docker_build_arg+=("${_key##--docker-build-arg=}")
				;;
			--build-image-tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_build_image_tag="$2"
				shift
				;;
			--build-image-tag=*)
				_arg_build_image_tag="${_key##--build-image-tag=}"
				;;
			--no-push|--push)
				_arg_push="on"
				test "${1:0:5}" = "--no-" && _arg_push="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'docker-repo', 'dockerfile-path' and 'docker-build-context-dir'"
	test "${_positionals_count}" -ge 3 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 3 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 3 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 3 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_docker_repo _arg_dockerfile_path _arg_docker_build_context_dir "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

# Helpful tips on writing build scripts:
# https://buildkite.com/docs/pipelines/writing-build-scripts
set -euxo pipefail

##
# Gather user input/environment variables
##

# shellcheck disable=SC2154
docker_repo="$_arg_docker_repo"

# shellcheck disable=SC2154
dockerfile_path="$_arg_dockerfile_path"

# shellcheck disable=SC2154
docker_build_context_dir="$_arg_docker_build_context_dir"

BUILDKITE_COMMIT=${BUILDKITE_COMMIT:-unknown_git_commit}

build_image_tag="$_arg_build_image_tag"
if [[ -z $build_image_tag ]]; then
    build_image_tag=$(buildkite-agent meta-data get "build_image_tag")
fi

build_args_str="--build-arg COMMIT_SHA=${BUILDKITE_COMMIT} "
build_args_str+="--build-arg BUILD_IMAGE_TAG=${build_image_tag} "

if [[ ! -z ${_arg_docker_build_arg-} ]]; then
    for build_arg in "${_arg_docker_build_arg[@]}"
    do
        build_args_str+="--build-arg ${build_arg} "
    done
fi

# shellcheck disable=SC2086
docker build --rm --force-rm \
  ${build_args_str} \
  -t "${docker_repo}:${build_image_tag}" \
  -f "${dockerfile_path}" \
  "${docker_build_context_dir}"

if [[ $_arg_push = "on" ]]; then
    docker push "${docker_repo}:${build_image_tag}"
else
    echo "Docker push is being skipped. Remove --no-push to publish to docker"
fi
# ] <-- needed because of Argbash
