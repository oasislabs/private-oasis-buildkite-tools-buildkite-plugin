#! /bin/bash

##
# Promotes a docker image tag by retagging from one tag to another. Defaults to
# promoting the `build_image_tag` in the buildkite meta-data
#
# Usage (Promote the current buildkite meta-data `build_image_tag` to staging
# on the oasislabs/test docker repo):
#
#     $ ./promote_docker_image_tag.sh oasislabs/test staging
#
# Usage (Promote the current staging tag to production on the oasislabs/test
# docker repo):
#
#     $ ./promote_docker_image_tag.sh --from-image-tag staging oasislabs/test production
#
##

# ARG_OPTIONAL_SINGLE([from-image-tag],[],[The tag to promote])
# ARG_OPTIONAL_SINGLE([build-variant],[],[Specifies a build variant for a tag])
# ARG_POSITIONAL_SINGLE([docker-repo],[Docker repo name])
# ARG_POSITIONAL_SINGLE([to-image-tag],[The tag that will be updated])
# ARG_HELP([Promotes a build image tag to a different tag name])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret=$2
	test -n "$_ret" || _ret=1
	test "$_PRINT_HELP" = yes && print_help >&2
	echo "$1" >&2
	exit ${_ret}
}


begins_with_short_option()
{
	local first_option all_short_options='h'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_from_image_tag=
_arg_build_variant=


print_help()
{
	printf '%s\n' "Promotes a build image tag to a different tag name"
	printf 'Usage: %s [--from-image-tag <arg>] [--build-variant <arg>] [-h|--help] <docker-repo> <to-image-tag>\n' "$0"
	printf '\t%s\n' "<docker-repo>: Docker repo name"
	printf '\t%s\n' "<to-image-tag>: The tag that will be updated"
	printf '\t%s\n' "--from-image-tag: The tag to promote (no default)"
	printf '\t%s\n' "--build-variant: Specifies a build variant for a tag (no default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	_positionals_count=0
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			--from-image-tag)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_from_image_tag="$2"
				shift
				;;
			--from-image-tag=*)
				_arg_from_image_tag="${_key##--from-image-tag=}"
				;;
			--build-variant)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_build_variant="$2"
				shift
				;;
			--build-variant=*)
				_arg_build_variant="${_key##--build-variant=}"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_last_positional="$1"
				_positionals+=("$_last_positional")
				_positionals_count=$((_positionals_count + 1))
				;;
		esac
		shift
	done
}


handle_passed_args_count()
{
	local _required_args_string="'docker-repo' and 'to-image-tag'"
	test "${_positionals_count}" -ge 2 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 2 (namely: $_required_args_string), but got only ${_positionals_count}." 1
	test "${_positionals_count}" -le 2 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 2 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
	local _positional_name _shift_for=$1
	_positional_names="_arg_docker_repo _arg_to_image_tag "

	shift "$_shift_for"
	for _positional_name in ${_positional_names}
	do
		test $# -gt 0 || break
		eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
		shift
	done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


# Helpful tips on writing build scripts:
# https://buildkite.com/docs/pipelines/writing-build-scripts
set -euxo pipefail

##
# Local variables
##
# shellcheck disable=SC2154
docker_repo="$_arg_docker_repo"

##
# Required arguments
##
# shellcheck disable=SC2154
to_image_tag="$_arg_to_image_tag"

# If from-image-tag is not set then get the data from buildkite meta-data
# `build_image_tag`
from_image_tag="$_arg_from_image_tag"
if [[ -z "$from_image_tag" ]]; then
    from_image_tag=$(buildkite-agent meta-data get "build_image_tag")
fi

# If this is being deployed for a different build variant (e.g. ekiden-hw) then
# the tag will add a suffix.
tag_suffix=${_arg_build_variant:+-$_arg_build_variant}
if [[ -z "$tag_suffix" ]]; then
    # Support older versions of this script
    tag_suffix=${BUILD_VARIANT:+-$BUILD_VARIANT}
fi

##
# Add the provided tag suffix to the from image
##
docker pull "${docker_repo}:${from_image_tag}${tag_suffix}"

docker tag \
  "${docker_repo}:${from_image_tag}${tag_suffix}" \
  "${docker_repo}:${to_image_tag}"

docker push "${docker_repo}:${to_image_tag}"

# ] <-- needed because of Argbash
